/*
import {contentAPI as contentApi, userAPI as userApi} from "../api/api";
import {stopSubmit} from "redux-form";
import * as Promise from "pinkie";

const ADD_POST = 'ADD-POST';
const SET_USER_CONTENT = 'SET_USER_CONTENT';
const SET_STATUS = 'SET_STATUS';
const DELETE_POST = 'DELETE_POST';
const SAVE_PHOTO_SUCCESS = 'SAVE_PHOTO_SUCCESS';


let initialState = {
  posts: [
    {id: 1, message: 'Hi, how are you?', likesCount: 12},
    {id: 2, message: 'It\'s my first post', likesCount: 19}
  ],

  content: null,
  status: ""

};


const contentReducer = (state = initialState, action) => {

  switch (action.type) {
    case ADD_POST :
      let newPost = {
        id: 5,
        message: action.newPostText,
        likesCount: 0
      };
      return {
        ...state,
        posts: [...state.posts, newPost],
        newPostText: ''
      };


    case SET_STATUS :
      return {
        ...state,
        status: action.status,
      };
    case SET_USER_CONTENT :
      return {
        ...state,
        content: action.content
      };

    case DELETE_POST :
      return {
        ...state,
        posts: state.posts.filter(p => p.id != action.postId)
      };
    case SAVE_PHOTO_SUCCESS :
      return {
        ...state, content:
          {...state.content, photos: action.photos}
      };

    default:

      return state;
  }
};
export const addPostActionCreator = (newPostText) => ({type: ADD_POST, newPostText});//сокращенная запись ф-ц кот возвращает обьект
export const setUserContent = (content) => ({type: SET_USER_CONTENT, content});
export const setStatus = (status) => ({type: SET_STATUS, status});
export const savePhotoSuccess = (photos) => ({type: SAVE_PHOTO_SUCCESS, photos});

//THUNK
export const getUserContent = (userId) => async (dispatch) => {
  const response = await userApi.getContent(userId);
  dispatch(setUserContent(response.data));
};
export const getStatus = (userId) => async (dispatch) => {
  const response = await contentApi.getStatus(userId);
  dispatch(setStatus(response.data));
};

export const updateStatus = (status) => async (dispatch) => {
  try{
    const response = await contentApi.updateStatus(status);
    if (response.data.resultCode === 0) {
      dispatch(setStatus(status));
    }
  }catch(error){
    //
  }

};
export const savePhoto = (file) => async (dispatch) => {
  const response = await contentApi.savePhoto(file);
  if (response.data.resultCode === 0) {
    dispatch(savePhotoSuccess(response.data.data.photos));
  }
};

export const saveContent = (content) => async (dispatch, getState) => {
  const userId = getState().auth.userId;
  const response = await contentApi.saveContent(content);
  if (response.data.resultCode === 0) {
    dispatch(getUserContent(userId));
  }else{
    dispatch(stopSubmit("editContent", {_error: response.data.messages[0]}));
    return Promise.reject(response.data.message[0]);
  }
};



export default contentReducer;*/
